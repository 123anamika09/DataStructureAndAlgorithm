class Solution {
    public int[][] merge(int[][] intervals) {
        int m = intervals[0].length;
        int n = intervals.length;
        Arrays.sort(intervals,(a,b)-> Integer.compare(a[0],b[0])); // lamda fnc compare on the basis of 1st lement of int intervals array ... 
        List<int[]>merged = new ArrayList<>();
        for(int[] interval:intervals) {
            if(merged.isEmpty() || merged.get(merged.size() - 1)[1] < interval[0]){
                merged.add(interval);
            }else {
                 merged.get(merged.size() - 1)[1] = Math.max(merged.get(merged.size() - 1)[1], interval[1]); //merged.get(merged.size() - 1)     returns [1, 6]
            }// merged.size() - 1)[1]  --- [1] refers to index 1 of that interval, which is the end time.

        }
       return merged.toArray(new int[merged.size()][]);
 }
}
