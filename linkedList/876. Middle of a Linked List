
-------------------------------------------m-1 (coutining method ) ----------------------------------------------------------------------

t.c = Count nodes → O(n) + Traverse to middle → O(n/2) = O(n) 
------------------------------------------------Efficient? = Yes, but 2-pass--------------------------------
class Solution {
    public ListNode middleNode(ListNode head) {
        int count=0;
        ListNode temp = head;
        while(head!=null){
           count++;
           head = head.next; 
        }  
        int mid = count/2;
        for(int i = 1;i<=mid;i++){
           temp = temp.next;  
        }return temp;
    }
}



---------------------------------------------m-2  (Optimal Approach using slow & fast pointer)--------------------------------------------------------
---------------------------------------------More optimal? = Use slow-fast pointers for 1-pass---------------------------------------

class Solution {
    public ListNode middleNode(ListNode head) {
        ListNode slow = head ;
        ListNode fast = head;
        while(fast!=null && fast.next != null){
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }
}
