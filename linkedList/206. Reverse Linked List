class Solution {
    public ListNode reverseList(ListNode head) {
         ListNode node = null;

        while (head != null) {
            ListNode temp = head.next;
            head.next = node;
            node = head;
            head = temp;
        }

        return node; 



 //    m-1 = using stack but here extra space is used  
    // if (head == null || head.next == null) return head;

    //     Stack<ListNode> stack = new Stack<>();
    //     ListNode temp = head;
    //   while (temp != null) {
    //         stack.push(temp);
    //         temp = temp.next;
    //     }
    //     head = stack.pop(); 
    //     ListNode current = head;
    //     while (!stack.isEmpty()) {
    //         current.next = stack.pop();
    //         current = current.next;
    //     }
    //     current.next = null;
    //     return head;


    }
}
