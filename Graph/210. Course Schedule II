class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
       
            ArrayList<ArrayList<Integer>> adjList = new ArrayList<>(); //the adjacency list of a directed graph that represents course dependencies
            for(int i = 0;i<numCourses;i++){
                adjList.add(new ArrayList<Integer>());
            }
            int[] inDegree = new int[numCourses];
            for(int[] preReq : prerequisites){
                int course = preReq[0];
                int prereq = preReq[1];
   // here it get reverse 
                adjList.get(prereq).add(course);
                inDegree[course]++; 
            }
            // we uses queue here becausee queue  process the order int the way they are added
            int count = 0; 
            Queue<Integer> queue = new LinkedList<>();
            //  add all the course with 0 indegree to queue
            for(int i = 0;i<numCourses;i++){
                if(inDegree[i] == 0){
                    queue.offer(i); 
                }
            } 

             int[] result = new int[numCourses];
        int index = 0;
            //  ab hm check krenge kon sa course independent wale course pr depend h
             while(!queue.isEmpty()) {
            int crs = queue.poll();
            result[index++] = crs;

            for(int dependent : adjList.get(crs)){
                inDegree[dependent]--;
                if(inDegree[dependent] == 0) {
                    queue.offer(dependent);
                }
            }
        }
         return index == numCourses ? result : new int[0];
    }
}
