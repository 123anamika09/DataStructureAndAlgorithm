class Solution {
    public List<Integer> findSmallestSetOfVertices(int n, List<List<Integer>> edges) {
        // List<Integer> ans = new ArrayList<>();
        // int[] count = new int[n];
        // for(List<Integer>edge :edges){
        //     int from = edge.get(0);
        //     int to = edge.get(1);
        //     count[from]++;
        //     count[to]--;
        // }
        // for(int i = 0;i<n;i++){
        //     if(count[i] >=0){
        //         ans.add(i);
        //     }
        // }
        // return ans;



    
        int[] inDegree = new int[n]; // To store how many arrows are coming to each node

        // For every edge u -> v, increase inDegree[v]
        for (List<Integer> edge : edges) {
            int to = edge.get(1);
            inDegree[to]++;
        }

        // Now, collect all nodes with in-degree == 0
        List<Integer> result = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            if (inDegree[i] == 0) {
                result.add(i); // Arrow nahi aa rhi ispe, so we must start from here
            }
        }

        return result;
    }
}
