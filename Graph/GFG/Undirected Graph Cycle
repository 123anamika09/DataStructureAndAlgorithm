class Solution {
    public boolean dfs(int node , int[] visited, int parent , ArrayList<ArrayList<Integer>> adj){
        visited[node] = 1;
        for(int adjNode: adj.get(node)){
            if(visited[adjNode] == 0) {
              if(dfs(adjNode, visited, node, adj)) return true;
            }
              else if(adjNode!= parent) return true ;
            
        }
        return false;
    }
    
    public boolean isCycle(int V, int[][] edges) {
         ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
         
        for (int i = 0; i < V; i++) adj.add(new ArrayList<>());
        
        for (int[] edge : edges) {
            int u = edge[0];
            int v = edge[1];
            adj.get(u).add(v);
            adj.get(v).add(u); 
        }
        int[] visited = new int[V];
        for(int i = 0;i<V;i++){
            if(visited[i] == 0) {
                if(dfs(i, visited, -1, adj ) == true) return true;
                
            }
        }
        
        return false;
    }
}
