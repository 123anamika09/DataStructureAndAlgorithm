class Solution {
    
    public List<List<Integer>> kSmallestPairs(int[] nums1, int[] nums2, int k) {
        List<List<Integer >> res = new ArrayList<>();
        // Algo approach -- min heap(priority queue)
        // PriorityQueue<int[]> minHeap = new PriorityQueue<>((a,b)->a[0]-b[0]));  // store frist pair using lamda function 
        // new int[] {nums1[i] + nums2[0], i, 0} creates an integer array with three elements:
        // make a map with integer & pair ---- we check every possiblities & it takes o(n2) --- 10^5 == 10^10
  
        //   pq me 1 hi datatype daal skte
         PriorityQueue<int[]> maxHeap = new PriorityQueue<>((a, b) -> b[0] - a[0]); // integer make to add 3 values sum , nums1 element, nums2 element

        //  PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> Integer.compare(b[0],Â a[0]));  other ways to make max heap
             
             for(int i = 0;i<nums1.length;i++) {
                for(int j = 0;j<nums2.length;j++) {
                    int sum = nums1[i]+nums2[j];
                   if(maxHeap.size()<k) {
                     maxHeap.add(new int[]{sum,nums1[i],nums2[j]});
                   }
                   else if(sum<maxHeap.peek()[0]) { // maxheap.peek == arr giv
                      maxHeap.add(new int[]{sum,nums1[i],nums2[j]});
                      maxHeap.poll();
                   } else break;
                } 
             }
             while(!maxHeap.isEmpty()) {
                int [] arr= maxHeap.poll();
                res.add(Arrays.asList( arr[1],arr[2])); //fnc 
             }
        return res;
    }
}
