class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        int n = nums1.length;
        int m = nums2.length;
        int[] ans = new int[n];
        for(int i = 0;i<n;i++){
            int num =nums1[i];
            int idxinNums2 = -1;
            for(int j = 0;j<m;j++){
                if(num == nums2[j]){
                    idxinNums2 = j;
                    break;
                }
            }
            int nextGreater = -1;
            for(int k = idxinNums2+1;k<nums2.length;k++){
                if(nums2[k]>num) {
                    nextGreater=nums2[k];
                    break;
                }
            }
            ans[i] = nextGreater;
        }
return ans;
    }
}



------------------------------------------------------------method -2 = optimal using stack + map----------------------------------------------------------------
class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
Map<Integer,Integer> map = new HashMap<>();
Stack<Integer>  st = new Stack();
int n = nums2.length;
for(int num:nums2){ // We're traversing nums2 from left to right.
    while(!st.isEmpty()&& num>st.peek()){
        map.put(st.pop() ,num); //map(1,3) choose 3 ecause it's next greater element 
        //  now stack empty push 3  then read 4  .... 4> 3 map(3,4) ,, st is empty then stack me push 4 

        // stack ends with[4,2]  no grater element found for 4 & 2
    }
    st.push(num);
    } 
int m = nums1.length;
int [] ans = new int[m];
for(int i = 0;i<m;i++){
ans[i] = map.getOrDefault(nums1[i], -1);
}
return ans;




    }
}

