class MinStack {
  Stack<Integer> s ;
  Stack<Integer> min_st;
// if we don't use min_st then it gives t.c o(n) so we use min_st to reduce it's complexity to o(1)
    public MinStack() {
        s= new Stack<>();
        min_st =  new Stack<>(); // to check if the valuee if minm or not 
    }
    public void push(int val) {
       s.push(val); // Always push onto the main stack
        if (min_st.isEmpty() || val <= min_st.peek()) {
            min_st.push(val);  // Push onto min_st if it's the new minimum
        }
    }
     public void pop() {
        if(!s.isEmpty()) {
            if(s.peek().equals(min_st.peek())) min_st.pop();
        s.pop();
        }
    }
     public int top() {
      if(s.isEmpty()) return -1; 
      else  return s.peek();  
    }
    public int getMin() {
        if(min_st.isEmpty()) return -1;
        else return min_st.peek();
    }
}
